<%= render partial: 'tagmanager/components/action_cookie' %>

var ClientInfo = (function() {
  <%= render partial: 'tagmanager/components/client_utils' %>
  // public method
  return {
    get_browser_info: get_browser_info,
    get_device_info: get_device_info
  }
})();

var RadaTracking = (function() {
  var rada_info = {
    <% if Rails.env.development? %>
      url_api:"//localhost:3000/api/tracking/rada_track",
      request_cid:"//localhost:3000/api/tracking/generate_client_id",
    <% elsif Rails.env.staging? %>
      url_api: "//tcs-rada-reporter-staging.ingress.v2.cloud.edumall.io/api/tracking/rada_track",
      request_cid: "//tcs-rada-reporter-staging.ingress.v2.cloud.edumall.io/api/tracking/generate_client_id",
    <% elsif Rails.env.production? %>
      url_api:"//toppick.vn/api/tracking/rada_track",
      request_cid:"//toppick.vn/api/tracking/generate_client_id",
    <% end %>
      method: "post"
  }
  
  var app_info = {
    name: <%= "'#{@app_name}'".html_safe %>,
    version: "beta",
    // html of website must have rada_uid is user_id and ga_client_id is google analytic client id before 
    // user: jQuery('#rada_uid').val(),
    ga_client_id: jQuery('#ga_client_id').val(),
  }

  var tracker_prefix = "rada";
  var cookie_infos = {
    client_id: {
      name: "tracker.rada_tracking",
      //set expires for cookie is 3 months
      expires: 2160
    }, 
    pending_send_flag: {
      name: "tracker.pending_send_flag",
      expires: 1
    },
    tracking_session: {
      name: "tracker.tracking_session",
      expires: 5
    }
  }

  function getValueCookie(cookie_info) {
    var name = cookie_info.name;
    if(name === undefined){
      return undefined;
    } else {
      var match = document.cookie.match(new RegExp('(^| )' + name + '=([^;]+)'));
      if (match) return match[2];
    }
  }

  function saveCookie(cookie_info, value) {
    Action_cookie.set_cookie(cookie_info.name, value, cookie_info.expires);
  }

  var clientInfo = ClientInfo;

  //init data for track
  function build_data_for_track() {
    var time_start = Date.now();
    var storage_key = tracker_prefix + time_start;

    var dataTemp = {
      storage_key: storage_key,
      time_start: time_start,
      app_name: app_info.name,
      app_version: app_info.version,
      referer:document.referrer,
      url: window.location.href,
      client_os: clientInfo.get_device_info().os_name,
      client_browser: clientInfo.get_browser_info().name,
      client_version: "js_3.3.1",
      type_track:"",
      ga_client_id: app_info.ga_client_id,
      extras: {},
    }
    readAdditionalData(dataTemp);
    return dataTemp;
  }

  function readAdditionalData(data) {
    // var user_id = $('#rada_uid').val();
    var user_id = jQuery('meta[name=rada_uid]');
    if(user_id) {
      user_id = user_id.attr("content");
    } else {
      user_id = jQuery('#rada_uid').val();
      if (!user_id) user_id = null;
    }
    data.user = user_id;
  }

  //push data to localStorage
  function push_data_to_lc(name,data) {
    data_json = JSON.stringify(data);
    localStorage.setItem(name,data_json);
  }

  //transformation data before send data to server
  function tranform_data(params) {
    var data_tranform = [];
    for (i = 0; i < params.length; i++) {
      var obj_temp = {};
      var key = params.key(i);
      if(key.startsWith(tracker_prefix)) {
        obj_temp.key = key;
        obj_temp.data = JSON.parse(params.getItem(key));
        data_tranform.push(obj_temp);
      }
    }
    return data_tranform;
  }

  //after send data to server then delete old data
  function delete_old_localStorage(params) {
    for (i = 0; i < params.length; i++) {
      localStorage.removeItem(params[i]["key"]);
    }
  }
  
  function send_data_to_server () {
    var client_id = getValueCookie(cookie_infos.client_id);
    if(!client_id) {
      saveCookie(cookie_infos.pending_send_flag, true);
      generate_client_id();
      return;
    }

    var data_send_server = {};
    var data_local_storage = tranform_data(localStorage);
    data_send_server.client_id = client_id;
    data_send_server.tracking_session =  getValueCookie(cookie_infos.tracking_session);
    data_send_server.source = JSON.stringify(data_local_storage);
    jQuery.ajax({
      url: rada_info.url_api,
      type: rada_info.method,
      data: data_send_server,
      success: function(response) {
        delete_old_localStorage(data_local_storage);
        setSentTime(Date.now());
        saveCookie(cookie_infos.tracking_session, response.tracking_session);
        saveCookie(cookie_infos.pending_send_flag, false);
      }
    });
  }

  function generate_client_id() {
    var check_cookie = getValueCookie(cookie_infos.client_id);
    if(!check_cookie) {
      jQuery.ajax({
        url: rada_info.request_cid,
        type: "POST",
        data: { action:"request_cid" },
        success: function(response) {
          saveCookie(cookie_infos.client_id, response.client_id);
          saveCookie(cookie_infos.tracking_session, response.tracking_session);
          if (getValueCookie(cookie_infos.pending_send_flag)) {
            send_data_to_server();
          }
        }
      });
    }
  }

  function track(params) {
    var data = build_data_for_track();
    for(key in params){
      if(params[key]){
        data[key] = params[key];
      }
    }
    push_data_to_lc(data["storage_key"], data);
  }

  function setSentTime(time) {
    push_data_to_lc("time_send", time);
  }

  function getThresholdInterval(thresholds, diff) {
    var interval = 30000;
    var max = 0;
    for (threshold of thresholds) {
      if (diff >= threshold.threshold && max <= threshold.threshold) {
        max = threshold.threshold;
        interval = threshold.interval;
      }
    } 
    return interval;
  }

  function setup(config) {
      generate_client_id();
      var startLoopTime =  Date.now();
      var thresholds = config.sendConfig.thresholds;
      var currentInterval = getThresholdInterval(thresholds, 0);
      var loopsend = setInterval(function() {
        var time_send = localStorage.getItem("time_send");
        var current_time = Date.now();
        if (time_send) {
          try { time_send =  JSON.parse(time_send); } catch (e) { time_send = 0; }
          var nextInterval = getThresholdInterval(thresholds, current_time - startLoopTime);
          if ((current_time - time_send) >= (currentInterval) || nextInterval <= 0) {
              send_data_to_server();
          }
          currentInterval = nextInterval;
          if (currentInterval <= 0) {
            clearInterval(loopsend);
          }
        } else {
          setSentTime(current_time);
        }
      }, config.sendConfig.loopInMilis);
  }

  return {
    spytrack: track,
    build_data: build_data_for_track,
    push_data: push_data_to_lc,
    setup: setup
  }
})();