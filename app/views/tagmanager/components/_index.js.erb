// rada tracking handle
<%= render partial: 'tagmanager/components/rada_tracking' %>

// scroll tracker
<%= render partial: 'tagmanager/components/scroll_tracking' %>

var Focus_tracker = (function() {
  var checks ={};
  var check = {};
  return function(params,callback){
    $(window).scroll(function() {
      clearTimeout($.data(this, 'scrollTimer'));
      $.data(this, 'scrollTimer', setTimeout(function() {
        for(var i=0;i<params.length;i++){
          var selectors = $(params[i]);
          if(selectors.length > 1){
            for(var x=0;x<selectors.length;x++){
              var a = selectors[x].getBoundingClientRect().top;
              if(a >= 0 && a <= window.innerHeight && !checks[x]){
                callback(params[i]);
                checks[x] = true;
              }
            }
          } if(selectors.length == 1) {
            var b = selectors[0].getBoundingClientRect().top;
            if(b >= 0 && b <= window.innerHeight && !check[i]){
              callback(params[i]);
              check[i] = true;
            }
          }
        }
      }, 5000));
    });
  }
})();

var TagConfig  = {
  sendConfig: {
    loopInMilis: <%= Rails.env.development? ? 10000 : 30000 %>,
    thresholds: [
      { threshold: 0, interval: 40 * 1000 }, // loop 40s
      { threshold: 600 * 1000, interval: 80 * 1000 },  // reach 10m: 80s
      { threshold: 1200 * 1000, interval: 160 * 1000 },// reach 20m: 160s
      { threshold: 2400 * 1000, interval: 320 * 1000 }, // reach 40m: 320s
      { threshold: 4800 * 1000, interval: 640 * 1000 }, // reach 1h20m: 640s 
      { threshold: 9600 * 1000, interval: 1280 * 1000 }, // reach 2h40m: 1280s
      { threshold: 18000 * 1000, interval: -1 } // reach 5h: drop
    ]
  },
  "SendIntervalInSecs": <%= Rails.env.development? ? 40 : 10 %>,
  "BeatIntervalInSecs": 5
};

var RadarTag = (function() {

  var tracker = RadaTracking;
  
  function debug_log(msg) {
    <% if Rails.env.development? %>
      console.log(msg);
    <% end %>
  }

  function handleViewPage() {
    var data = tracker.build_data();
    data["type_track"] = "page_view";
    tracker.push_data(data["storage_key"],data);
  }

  function handleTimeSpent() {
    var data = tracker.build_data();
    data["type_track"] = "time_in_page";
    data["value_track"] = 0;
    const beatInterval = TagConfig.BeatIntervalInSecs;
      setInterval(function() {
      data["value_track"] += beatInterval;
      tracker.push_data(data["storage_key"],data);
    }, beatInterval * 1000);
  }

  function handleClickExtend(params, event) {
    var data = tracker.build_data();
    var obj_temp = params.selector;
    data["type_track"] = "click_in_page";
    data["value_track"] =  obj_temp.selector;
    data["extras"]["bnt_name"] = event.target.textContent;
    if(Object.prototype.hasOwnProperty.call(obj_temp,'attr')){
      data["extras"]["other_value"] = event.target.getAttribute(obj_temp.attr);
    }
    tracker.push_data(data["storage_key"],data);
  }
  
  function handleFocus(params){
    var data = tracker.build_data();
    data["type_track"] = "focus_in_page";
    var callback = function(params){
      data["time_start"] = new Date().getTime();
      data["value_track"] = params;
      tracker.push_data(data["storage_key"],data);
    }
    Focus_tracker(params.selector,callback);
  }

  function triggerViewPage(){
    handleViewPage();
  }

  function triggerTimeSpent(){
    handleTimeSpent();
  }

  function triggerClickExtend(params) {
    try {
      $(document).on("click", params.selector.selector, function(event) {
         params.handle(params, event);
      })
    } catch (e) {
      debug_log("some thing when wrong,in triggerClickExtend")
    }
  }

  function triggerFocus(params) {
    try {
      params.handle(params);
    } catch (e) {
      debug_log("some thing when wrong,in triggerFocus")
    }
  }

  function bindClickExtend(selector) {
    var params = {};
    params.selector = selector;
    params.trigger = triggerClickExtend;
    params.handle = handleClickExtend;
    params.trigger(params);
  }

  function bindFocus(selector) {
    var params = {};
    params.selector = selector;
    params.trigger = triggerFocus;
    params.handle = handleFocus;
    params.trigger(params);
  }

  function handleScroll(){
    window.tracker_scroll = window.ScrollTracker();
    window.tracker_scroll.on({
      percentages: {
        every: [50]
      }
    }, function(evt) {
      var data = tracker.build_data();
      data["type_track"] = "scroll_track";
      data["value_track"] = evt.data.label;
      data["extras"] = window.tracker_scroll._show_info();
      data["extras"]["value_depth"] = evt.data.depth;
      tracker.push_data(data["storage_key"],data);
    });
  }

  function triggerScroll(){
    handleScroll();
  }

  return {
    onReady: function() {
      tracker.setup(TagConfig);

      triggerViewPage();
      triggerTimeSpent();
      triggerScroll();
      <%= renderBindClickExtend(@tags) %>
      <%= renderImport(@tags) %>
      <%= renderBindFocus(@tags) %>
    }
  }
})();

jQuery(document).ready(function($) {
  RadarTag.onReady();
});

<%= render partial: 'tagmanager/components/spymaster_wrapper' %>
